@model IEnumerable<OuParkingDashboard.Models.ViewModels.GarageViewModel>

@{
    ViewData["Title"] = "Garage Status";
    Layout = "_Layout"; // uses your Shared/_Layout.cshtml
}

<h1 class="mb-4">🚗 Live Garage Status</h1>

<table id="garageTable" class="table">
    <thead>
        <tr>
            <th>Garage</th>
            <th>Capacity</th>
            <th>Available</th>
            <th>Fullness</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var g in Model)
        {
            var color = g.PercentFull == 0 ? "gray" :
            g.PercentFull <= 50 ? "green" :
            g.PercentFull <= 70 ? "yellow" :
            g.PercentFull <= 90 ? "orange" : "red";

            <tr>
                <td>@g.Name</td>
                <td>@g.Capacity</td>
                <td>@g.Available</td>
                <td>
                    <div class="bar-container">
                        <div class="bar @color" style="width:@g.PercentFull%;">
                            <span>@g.PercentFull% </span>
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<section id="campus-map" style="margin-top:30px;">
    <h2>🗺️ Campus Map</h2>
    <p>
        <a class="pdf-link" href="/pdfs/ou-parking-map-2025.pdf" target="_blank" rel="noopener noreferrer">
            📄 View Full Parking Map (PDF)
        </a>
    </p>
</section>

@section Scripts {
    <script>
        // Helper: decide bar color based on fullness
        function getBarColor(percentage) {
            if (percentage === 0) return 'gray';
            if (percentage <= 50) return 'green';
            else if (percentage <= 70) return 'yellow';
            else if (percentage <= 90) return 'orange';
            else return 'red';
        }

        async function fetchAndRender() {
            try {
                const res = await fetch('/api/garages');
                const garages = await res.json();

                const tbody = document.querySelector('#garageTable tbody');
                tbody.innerHTML = '';

                garages.forEach(g => {
                    const percentFull = Math.floor((1 - g.available / g.capacity) * 100);
                    const color = getBarColor(percentFull);

                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                        <td>${g.name}</td>
                        <td>${g.capacity}</td>
                        <td>${g.available}</td>
                        <td>
                            <div class="bar-container">
                                <div class="bar ${color}" style="width:${percentFull}%;">
                                    <span>${percentFull}%</span>
                                </div>
                            </div>
                        </td>
                    `;
                    tbody.appendChild(tr);
                });
            } catch (e) {
                console.error('Failed to fetch garages', e);
            }
        }

        // Refresh every 5s
        setInterval(fetchAndRender, 5000);
    </script>
}